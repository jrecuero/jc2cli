__docformat__ = 'restructuredtext en'


# -----------------------------------------------------------------------------
#  _                            _
# (_)_ __ ___  _ __   ___  _ __| |_ ___
# | | '_ ` _ \| '_ \ / _ \| '__| __/ __|
# | | | | | | | |_) | (_) | |  | |_\__ \
# |_|_| |_| |_| .__/ \___/|_|   \__|___/
#             |_|
# -----------------------------------------------------------------------------
#
import jc2cli.tools.loggerator as loggerator


# -----------------------------------------------------------------------------
#
#   ___ ___  _ __  ___| |_ __ _ _ __ | |_ ___
#  / __/ _ \| '_ \/ __| __/ _` | '_ \| __/ __|
# | (_| (_) | | | \__ \ || (_| | | | | |_\__ \
#  \___\___/|_| |_|___/\__\__,_|_| |_|\__|___/
#
# -----------------------------------------------------------------------------
#
MODULE = 'EX.ASM.machine'
logger = loggerator.getLoggerator(MODULE)

MEM_SIZE = 256 * 256
MEM_BASE_ADDR = 0
DISP_SIZE = 256
DISP_BASE_ADDR = 256 * 256
REGS_SIZE = 8


# -----------------------------------------------------------------------------
#            _                     _   _
#  ___ _   _| |__  _ __ ___  _   _| |_(_)_ __   ___  ___
# / __| | | | '_ \| '__/ _ \| | | | __| | '_ \ / _ \/ __|
# \__ \ |_| | |_) | | | (_) | |_| | |_| | | | |  __/\__ \
# |___/\__,_|_.__/|_|  \___/ \__,_|\__|_|_| |_|\___||___/
#
# -----------------------------------------------------------------------------
#


# -----------------------------------------------------------------------------
#       _                     _       __ _       _ _   _
#   ___| | __ _ ___ ___    __| | ___ / _(_)_ __ (_) |_(_) ___  _ __  ___
#  / __| |/ _` / __/ __|  / _` |/ _ \ |_| | '_ \| | __| |/ _ \| '_ \/ __|
# | (__| | (_| \__ \__ \ | (_| |  __/  _| | | | | | |_| | (_) | | | \__ \
#  \___|_|\__,_|___/___/  \__,_|\___|_| |_|_| |_|_|\__|_|\___/|_| |_|___/
#
# -----------------------------------------------------------------------------
#
class Memory(list):

    def __init__(self, size=MEM_SIZE, base_address=MEM_BASE_ADDR):
        super(Memory, self).__init__()
        self._size = size
        self._base_address = base_address
        for x in range(size):
            self.append(0)

    def append(self, value):
        if len(self) < self._size:
            super(Memory, self).append(value)
        else:
            raise Exception('Memory is full')


class Display(Memory):

    def __init__(self, size=DISP_SIZE, base_address=DISP_BASE_ADDR):
        super(Display, self).__init__(size, base_address)


class Registers(dict):

    def __init__(self, size=REGS_SIZE):
        super(Registers, self).__init__()
        self._size = size
        for x in range(size):
            self['R{}'.format(x + 1)] = 0


class Machine(object):

    def __init__(self):
        self.memory = Memory()
        self.display = Display()
        self.registers = Registers()


# -----------------------------------------------------------------------------
#                  _
#  _ __ ___   __ _(_)_ __
# | '_ ` _ \ / _` | | '_ \
# | | | | | | (_| | | | | |
# |_| |_| |_|\__,_|_|_| |_|
#
# -----------------------------------------------------------------------------
#
if __name__ == '__main__':
    pass
